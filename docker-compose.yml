version: "2"
services:
  postgres:
    image: postgres:11-alpine
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: 'manifold_production'
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    networks:
      - network1
    restart: unless-stopped
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.7
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: 'false'
    networks:
      - network1
    restart: unless-stopped
  
  redis:
    image: redis:alpine
    volumes:
      - ./data/redis:/data
    networks:
      - network1
    restart: unless-stopped
  
  api_cable:
    image: manifoldscholarship/manifold-api:${MANIFOLD_TAG}
    volumes:
      - ./data/api/public:/opt/manifold/api/public
      - ./data/sockets:/manifold_sockets
    env_file:
      - ./environment/manifold.env
    networks:
      - network1
    command: ["./start-and-run", "bin/cable"]
    restart: unless-stopped
  
  api_clockwork:
    image: manifoldscholarship/manifold-api:${MANIFOLD_TAG}
    volumes:
      - ./data/api/public:/opt/manifold/api/public
      - ./data/sockets:/manifold_sockets
    env_file:
      - ./environment/manifold.env
      - ./environment/rails.env
    networks:
      - network1
    command: ["./start-and-run", "bin/zhong zhong.rb"]
    restart: unless-stopped
  
  api_rails:
    image: manifoldscholarship/manifold-api:${MANIFOLD_TAG}
    volumes:
      - ./data/api/public:/opt/manifold/api/public
      - ./data/sockets:/manifold_sockets
    env_file:
      - ./environment/manifold.env
    command: ["./start-and-run", "bin/puma -C config/puma.rb"]
    networks:
      - network1
    restart: unless-stopped

  api_sidekiq:
    image: manifoldscholarship/manifold-api:${MANIFOLD_TAG}
    volumes:
      - ./data/api/public:/opt/manifold/api/public
      - ./data/sockets:/manifold_sockets
    env_file:
      - ./environment/manifold.env
    networks:
      - network1
    command: ["./start-and-run", "bin/sidekiq"]
    restart: unless-stopped

  client:
    image: manifoldscholarship/manifold-client:${MANIFOLD_TAG}
    env_file:
      - ./environment/manifold.env
    volumes:
      - ./data/api/public:/opt/manifold/api/public
      - ./data/sockets:/manifold_sockets
    command: yarn run start-docker
    networks:
      - network1
    restart: unless-stopped

  proxy:
    image: manifoldscholarship/manifold-nginx:${MANIFOLD_TAG}
    environment:
      VIRTUAL_PORT: 80
      VIRTUAL_HOST: ${DOMAIN}
      LETSENCRYPT_HOST: ${DOMAIN}
      LETSENCRYPT_EMAIL: ${EMAIL}
    volumes:
      - ./data/nginx/ssl:/etc/nginx/ssl
      - ./data/api/public:/opt/manifold/api/public
      - ./data/sockets:/manifold_sockets
    command: ["start-nginx"]
    restart: unless-stopped
    networks:
      - network1

  nginx-proxy:
    build: 
      context: .
      dockerfile: nginx.dockerfile
    container_name: nginx-proxy 
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: ""
    restart: unless-stopped
    networks:
      - network1

  letsencrypt:
    image: nginxproxy/acme-companion
    container_name: letsencrypt 
    volumes:
      - certs:/etc/nginx/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from:
      - nginx-proxy
    restart: unless-stopped
    networks:
      - network1

volumes:
   certs:
#  manifold_data:
#  manifold_sockets:

networks:
  network1: